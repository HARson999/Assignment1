{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f281a693",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ineuron \n",
      "ineuron ineuron \n",
      "ineuron ineuron ineuron \n",
      "ineuron ineuron ineuron ineuron \n"
     ]
    }
   ],
   "source": [
    "#Q1\n",
    "n=4\n",
    "for i in range (0,4):\n",
    "    for j in range (i+1):\n",
    "        print('ineuron',end=' ')\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "277fb6c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                ineuron         \n",
      "        ineuron         ineuron         \n",
      "ineuron         ineuron         ineuron         \n",
      "        ineuron         ineuron         \n",
      "                ineuron         \n"
     ]
    }
   ],
   "source": [
    "#Q2\n",
    "s='ineuron'\n",
    "n=6\n",
    "for i in range(0,n-3):\n",
    "    for a in range(i,2):\n",
    "        print(\" \"*len(s),end=\" \")\n",
    "    for b in range(0,i+1):\n",
    "        print(s,\" \"*len(s),end=\" \")\n",
    "    print()\n",
    "for i in range(0,n-4):\n",
    "    for c in range(0,i+1):\n",
    "        print(\" \"*len(s),end=\" \")\n",
    "    for d in range(n-4,i,-1):\n",
    "        print(s,\" \"*len(s),end=\" \")\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e8f4d68c",
   "metadata": {},
   "outputs": [],
   "source": [
    "l=[[1,2,3,4],(2,3,4,5,6),(3,4,5,6,7),set([23,4,5,45,4,4,5,45,45,4,5]),{'k1':'sugh','k2':'ineuron','k3':'kumar',3:6,7:8},['ineuron','data science']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4212b8a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4]\n",
      "['ineuron', 'data science']\n"
     ]
    }
   ],
   "source": [
    "#Q3: Try to extract all the list entity\n",
    "for i in l:\n",
    "    if type(i)==list:\n",
    "        print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "bf967515",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 3, 4, 5, 6)\n",
      "(3, 4, 5, 6, 7)\n"
     ]
    }
   ],
   "source": [
    "#Q4: Try to extract all the tuples entities\n",
    "for i in l:\n",
    "    if type(i)==tuple:\n",
    "        print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "34f84c1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'k1': 'sugh', 'k2': 'ineuron', 'k3': 'kumar', 3: 6, 7: 8}\n"
     ]
    }
   ],
   "source": [
    "#Q5:Try to extract all the dict enteties\n",
    "for i in l:\n",
    "    if type (i)==dict:\n",
    "        print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9ffeeaef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{45, 4, 5, 23}\n"
     ]
    }
   ],
   "source": [
    "#Q6:Try to extract all the set enteties\n",
    "for i in l:\n",
    "    if type(i)==set:\n",
    "        print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d1f7a579",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "45\n",
      "4\n",
      "5\n",
      "23\n",
      "6\n",
      "3\n",
      "8\n",
      "7\n"
     ]
    }
   ],
   "source": [
    "#Q7:Try to extract all the numerical data it may b a part of dict key and values\n",
    "for i in l:\n",
    "    if type(i)==list or type(i)==tuple:\n",
    "        for j in i:\n",
    "            if type(j)==int:\n",
    "                print(j)\n",
    "    if type(i)==dict:\n",
    "        for k,v in i.items():\n",
    "            if type(v)==int or type(k)==int:\n",
    "                print(v)\n",
    "                print(k)\n",
    "    if type(i)==set:\n",
    "        for j in i:\n",
    "            if type(j)==int:\n",
    "                print(j)\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6dde2b3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "156"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Q7: Try to give summation of all the numeric data\n",
    "l1=[]\n",
    "for i in l:\n",
    "    if type(i)==list or type(i)==tuple:\n",
    "        for j in i:\n",
    "            if type(j)==int:\n",
    "                l1.append(j)\n",
    "    if type(i)==dict:\n",
    "        for k,v in i.items():\n",
    "            if type(v)==int or type(k)==int:\n",
    "                l1.append(v)\n",
    "                l1.append(k)\n",
    "    if type(i)==set:\n",
    "        for j in i:\n",
    "            if type(j)==int:\n",
    "                l1.append(j)\n",
    "\n",
    "sum(l1)      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "c7968fb7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "#Q8:Try to filter out all the odd values out all numeric data which is a part of a list\n",
    "for i in l:\n",
    "    if type (i)== list:\n",
    "        for j in i :\n",
    "            if type(j)== int:\n",
    "                if j %2!=0:\n",
    "                    print(j)\n",
    "        #print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b317759a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "#Q9:Try to filter out all the even values out all numeric data which is a part of a list\n",
    "for i in l:\n",
    "    if type (i)== list:\n",
    " Try to filter out all the odd values out all numeric data which is a part of a list       for j in i :\n",
    "            if type(j)== int:\n",
    "                if j %2==0:\n",
    "                    print(j)\n",
    "        #print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "67667b61",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ineuron\n",
      "ineuron\n"
     ]
    }
   ],
   "source": [
    "#Q10: Try to extract \"ineruon\" out of this data\n",
    "for i in l:\n",
    "    if type(i) == list or type(i) == tuple or type ==dict or type ==set:\n",
    "        for j in i :\n",
    "            if j == \"ineuron\":\n",
    "                print(j)\n",
    "    if type(i)== dict:\n",
    "        for v,k in i.items():\n",
    "            if v== \"ineuron\":\n",
    "                print(v)\n",
    "            if k== \"ineuron\":\n",
    "                print(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "0c570921",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k1\n",
      "k2\n",
      "k3\n",
      "3\n",
      "7\n"
     ]
    }
   ],
   "source": [
    "#Q12: Try to extract \"ineruon\" out of this data\n",
    "for i in l:\n",
    "    if type(i)==dict:\n",
    "        for v,k in i.items():\n",
    "            print(v)\n",
    "           # print(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "84eb8120",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k1\n",
      "k2\n",
      "k3\n",
      "ineuron\n",
      "data science\n"
     ]
    }
   ],
   "source": [
    "#Q13: Try to filter out all the string data\n",
    "for i in l:\n",
    "    for j in i:\n",
    "        if type(j)==str:\n",
    "            print(j)\n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "824af0d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "4\n",
      "5\n",
      "4\n",
      "5\n",
      "2\n",
      "3\n",
      "k\n",
      "1\n",
      "s\n",
      "u\n",
      "g\n",
      "h\n",
      "k\n",
      "2\n",
      "i\n",
      "n\n",
      "e\n",
      "u\n",
      "r\n",
      "o\n",
      "n\n",
      "k\n",
      "3\n",
      "k\n",
      "u\n",
      "m\n",
      "a\n",
      "r\n",
      "3\n",
      "6\n",
      "7\n",
      "8\n",
      "i\n",
      "n\n",
      "e\n",
      "u\n",
      "r\n",
      "o\n",
      "n\n",
      "d\n",
      "a\n",
      "t\n",
      "a\n",
      "s\n",
      "c\n",
      "i\n",
      "e\n",
      "n\n",
      "c\n",
      "e\n"
     ]
    }
   ],
   "source": [
    "#Q14: Try to Find out alphanum in data\n",
    "for i in str(l):\n",
    "    for j in i:\n",
    "        if j.isalnum()==True:\n",
    "            print(j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4db5ec43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1,\n",
       " 2,\n",
       " 3,\n",
       " 4,\n",
       " 2,\n",
       " 3,\n",
       " 4,\n",
       " 5,\n",
       " 6,\n",
       " 3,\n",
       " 4,\n",
       " 5,\n",
       " 6,\n",
       " 7,\n",
       " 45,\n",
       " 4,\n",
       " 5,\n",
       " 23,\n",
       " 'k1',\n",
       " 'sugh',\n",
       " 'k2',\n",
       " 'ineuron',\n",
       " 'k3',\n",
       " 'kumar',\n",
       " 3,\n",
       " 6,\n",
       " 7,\n",
       " 8,\n",
       " 'ineuron',\n",
       " 'data science']"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Q16: Try to unwrape all the collection inside collection and create a flat list\n",
    "l1=[]\n",
    "for i in tuple(l):\n",
    "    if type(i)==list or type(i)==tuple or type(i)==set:\n",
    "        for j in i:\n",
    "            l1.append(j)\n",
    "    if type(i)==dict:\n",
    "        for j,k in i.items():\n",
    "            l1.append(j)\n",
    "            l1.append(k)\n",
    "l1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c52a876",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q16: Try to find out multiplication of all numeric value in the individual collection inside data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5b9b126",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q17:Try to find out a number of occurances of all the data"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
